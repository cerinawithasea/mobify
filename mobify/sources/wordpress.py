# -*- coding: utf-8 -*-
"""
Support for wordpress.com blogs

https://blogvigdis.wordpress.com/sitemap.xml
https://blogvigdis.wordpress.com/2017/03/05/powierzchnia-wysp-owczych-na-sposob-farerski/
https://farerskiekadry.pl/2018/11/farerskie-okruszki.html
"""
import re

from mobify.source import MultiChapterSource, MobifySource


class WordpressSource(MultiChapterSource):
    """
    This will return a set of sources for each post

    @see https://blogvigdis.wordpress.com/sitemap.xml
    """
    @staticmethod
    def is_my_url(url):
        return '.wordpress.com' in url

    def parse_sitemap(self, sitemap):
        """
        :type sitemap str
        :rtype: list[str]
        """
        # use sitemap's XML as a content
        self._logger.info("Fetching XML sitemap: %s", sitemap)
        self._content = self._http.get(sitemap).text

        # <loc>https://blogvigdis.wordpress.com/2017/12/10/jolasveinar-islandzkie-mikolaje/</loc>
        items = sorted([
            str(item.group(1)) for item in re.finditer(r'<loc>([^<]+)</loc>', self.content)
        ])

        links = []

        for item in items:
            # handle sub-sitemaps (generated by "Yoast SEO" plugin and others)
            # <loc>https://farerskiekadry.pl/post-sitemap.xml</loc>
            if item.endswith('.xml'):
                # only parse posts sitemap
                if '/post-sitemap' in item:
                    links += self.parse_sitemap(item)
            else:
                links.append(item)

        self._logger.info('Returned %d items from <%s> sitemap', len(links), sitemap)
        return links

    def get_chapters(self):
        domain = re.match(r'^(https?://[^/]+)', self._url).group(1)
        sitemap = '{}/sitemap.xml'.format(
            domain
        )

        # <loc>https://blogvigdis.wordpress.com/2017/12/10/jolasveinar-islandzkie-mikolaje/</loc>
        links = self.parse_sitemap(sitemap)

        self._logger.info('Items in XML sitemap: %d', len(links))

        return [
            WordpressPost(link)
            for link in links
            if self.is_post_url(link)
        ]

    @staticmethod
    def is_post_url(url):
        """
        :type url str
        :rtype: bool
        """
        # https://blogvigdis.wordpress.com/2017/12/10/jolasveinar-islandzkie-mikolaje/
        # https://farerskiekadry.pl/2018/11/farerskie-okruszki.html
        # https://pofikasz.pl/post-sitemap.xml
        return re.search(r'/\d{4}/\d{2}/', url)


class WordpressPost(MobifySource):
    @staticmethod
    def is_my_url(url):
        """
        This source cannot be created directly from Publisher
        """
        raise NotImplementedError

    def get_html(self):
        content = self.xpath('//*[contains(@class, "post-content")]') or \
            self.xpath('//article[contains(@class, "type-post")]//div[@class="entry-content"]')  # https://pofikasz.pl/

        # not a post entry
        if not content:
            return None

        # HTML clenaup
        post = self.remove_nodes(content, [
            '*//a[img]',
            '*//xml',
            '*[@class="wpcnt"]',  # ads
            'div[@id="jp-post-flair"]',  # share bar
            'div[@class="single-thumb"]',  # shares
            'aside',  # <!-- Share buttons by mashshare.net - Version: 3.5.8-->
        ])

        html = self.get_node_html(post)
        html = re.sub(r'</?(span|a|img|em|div|figure)[^>]*>', '', html)
        html = re.sub(r'\sstyle="[^"]+">', '>', html)

        # print(html)

        return u'<h1>{title}</h1>\n\n{content}'.format(
            title=self.get_title(),
            content=html.strip()
        )

    def get_title(self):
        # <meta property="og:title" content="Inskrypcja, a właściwie inskrypcje z Tønsberg (N A39)" />
        return self.get_node('//*[@property="og:title"]', attr='content')

    def get_author(self):
        # <meta property="og:site_name" content="Skandynawski blog Vigdis" />
        return self.get_node('//*[@property="og:site_name"]', attr='content')

    def get_language(self):
        # <html lang="pl-PL">
        # <html class="no-js" lang="pl-PL" prefix="og: http://ogp.me/ns#">
        lang = self.get_node('//*[@lang]', attr='lang')

        return lang.split('-')[0] if lang else None
